pipeline {
    agent { label 'docker' }

    stages {
        
        stage('Pre-clean') {
            steps {
                sh '''
                    sudo chown -R jenkins:jenkins .
                    chmod -R u+w .
                '''
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                retry(2) {
                    git url: 'https://github.com/grycap/oscar-tests.git', branch: 'main'
                }
                stash name: 'oscar-tests', includes: 'data/**, resources/**, robot_libs/**, tests/**, variables/**'
            }
        }

        stage('Run OSCAR tests on <cluster_name>') {
            agent { 
                docker {
                    label 'docker'
                    image 'ghcr.io/grycap/oscar-tests:latest'
                    args '--shm-size=1g -u root'
                    alwaysPull true
                }
            }
            environment {
                BROWSER = 'chromium'
                ROBOT_TESTS_DIR = "$WORKSPACE"
                ROBOT_REPORTS_DIR = "$WORKSPACE/results_"
                ROBOT_TEST_RUN_ID = '<cluster_name>'
            }

            steps {
                unstash 'oscar-tests'

                retry (2) {
                    sh 'go install github.com/grycap/oscar-cli@latest'
                }
                sh 'mv /root/go/bin/oscar-cli /bin'

                retry (2) {
                    sh 'pip install oscar-python'
                }

                withCredentials([file(credentialsId: '<cluster-name>-secret-file', variable: '<CLUSTER_NAME>_FILE')]) {
                    script {
                        env.ROBOT_OPTIONS = "--pythonpath . --variablefile $<CLUSTER_NAME>_FILE"
                    }
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        retry (2) {
                            sh '/opt/robotframework/bin/run-tests-in-virtual-screen.sh'
                        }
                    }
                }

                robot(
                    outputPath: "$WORKSPACE/results_<cluster_name>",
                    passThreshold: 100.0,
                    unstableThreshold: 0.0,
                    disableArchiveOutput: false,
                    outputFileName: "output.xml",
                    logFileName: "log.html",
                    reportFileName: "report.html",
                    countSkippedTests: true
                )
            }
        }
    }

    post {
        unsuccessful {
            emailext(
                subject: "OSCAR ${JOB_NAME} pipeline is unstable",
                body: """
                    <p>Pipeline <b>${JOB_NAME} #${BUILD_NUMBER}</b> is unstable.</p>
                    <p>Check the console output for more details: 
                    <a href="${BUILD_URL}console">${BUILD_URL}console</a></p>
                """,
                to: '<mail1>,<mail2>',
                mimeType: 'text/html',
                attachLog: true
            )
        }
        always {
            archiveArtifacts artifacts: '$WORKSPACE/results_<cluster_name>/**', allowEmptyArchive: true
        }
        cleanup {
            node('docker'){
                sh 'sudo chown -R jenkins:jenkins .'
                cleanWs()
            }
        }
    }        
 
}
